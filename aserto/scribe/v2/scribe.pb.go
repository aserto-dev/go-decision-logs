// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: aserto/scribe/v2/scribe.proto

package scribe

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WriteBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Batch         []*anypb.Any           `protobuf:"bytes,2,rep,name=batch,proto3" json:"batch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteBatchRequest) Reset() {
	*x = WriteBatchRequest{}
	mi := &file_aserto_scribe_v2_scribe_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteBatchRequest) ProtoMessage() {}

func (x *WriteBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_scribe_v2_scribe_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteBatchRequest.ProtoReflect.Descriptor instead.
func (*WriteBatchRequest) Descriptor() ([]byte, []int) {
	return file_aserto_scribe_v2_scribe_proto_rawDescGZIP(), []int{0}
}

func (x *WriteBatchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WriteBatchRequest) GetBatch() []*anypb.Any {
	if x != nil {
		return x.Batch
	}
	return nil
}

type WriteBatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ack           bool                   `protobuf:"varint,2,opt,name=ack,proto3" json:"ack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteBatchResponse) Reset() {
	*x = WriteBatchResponse{}
	mi := &file_aserto_scribe_v2_scribe_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteBatchResponse) ProtoMessage() {}

func (x *WriteBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_scribe_v2_scribe_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteBatchResponse.ProtoReflect.Descriptor instead.
func (*WriteBatchResponse) Descriptor() ([]byte, []int) {
	return file_aserto_scribe_v2_scribe_proto_rawDescGZIP(), []int{1}
}

func (x *WriteBatchResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WriteBatchResponse) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

var File_aserto_scribe_v2_scribe_proto protoreflect.FileDescriptor

const file_aserto_scribe_v2_scribe_proto_rawDesc = "" +
	"\n" +
	"\x1daserto/scribe/v2/scribe.proto\x12\x10aserto.scribe.v2\x1a\x19google/protobuf/any.proto\"O\n" +
	"\x11WriteBatchRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12*\n" +
	"\x05batch\x18\x02 \x03(\v2\x14.google.protobuf.AnyR\x05batch\"6\n" +
	"\x12WriteBatchResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03ack\x18\x02 \x01(\bR\x03ack2g\n" +
	"\x06Scribe\x12]\n" +
	"\n" +
	"WriteBatch\x12#.aserto.scribe.v2.WriteBatchRequest\x1a$.aserto.scribe.v2.WriteBatchResponse\"\x00(\x010\x01BSZ>github.com/aserto-dev/go-decision-logs/aserto/scribe/v2;scribe\xaa\x02\x10Aserto.Scribe.V2b\x06proto3"

var (
	file_aserto_scribe_v2_scribe_proto_rawDescOnce sync.Once
	file_aserto_scribe_v2_scribe_proto_rawDescData []byte
)

func file_aserto_scribe_v2_scribe_proto_rawDescGZIP() []byte {
	file_aserto_scribe_v2_scribe_proto_rawDescOnce.Do(func() {
		file_aserto_scribe_v2_scribe_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_aserto_scribe_v2_scribe_proto_rawDesc), len(file_aserto_scribe_v2_scribe_proto_rawDesc)))
	})
	return file_aserto_scribe_v2_scribe_proto_rawDescData
}

var file_aserto_scribe_v2_scribe_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_aserto_scribe_v2_scribe_proto_goTypes = []any{
	(*WriteBatchRequest)(nil),  // 0: aserto.scribe.v2.WriteBatchRequest
	(*WriteBatchResponse)(nil), // 1: aserto.scribe.v2.WriteBatchResponse
	(*anypb.Any)(nil),          // 2: google.protobuf.Any
}
var file_aserto_scribe_v2_scribe_proto_depIdxs = []int32{
	2, // 0: aserto.scribe.v2.WriteBatchRequest.batch:type_name -> google.protobuf.Any
	0, // 1: aserto.scribe.v2.Scribe.WriteBatch:input_type -> aserto.scribe.v2.WriteBatchRequest
	1, // 2: aserto.scribe.v2.Scribe.WriteBatch:output_type -> aserto.scribe.v2.WriteBatchResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_aserto_scribe_v2_scribe_proto_init() }
func file_aserto_scribe_v2_scribe_proto_init() {
	if File_aserto_scribe_v2_scribe_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_aserto_scribe_v2_scribe_proto_rawDesc), len(file_aserto_scribe_v2_scribe_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aserto_scribe_v2_scribe_proto_goTypes,
		DependencyIndexes: file_aserto_scribe_v2_scribe_proto_depIdxs,
		MessageInfos:      file_aserto_scribe_v2_scribe_proto_msgTypes,
	}.Build()
	File_aserto_scribe_v2_scribe_proto = out.File
	file_aserto_scribe_v2_scribe_proto_goTypes = nil
	file_aserto_scribe_v2_scribe_proto_depIdxs = nil
}
